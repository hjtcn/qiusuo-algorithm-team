有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。
每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
如果 x == y，那么两块石头都会被完全粉碎；
如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。
 
示例 1：
输入：stones = [2,7,4,1,8,1]
输出：1
解释：
组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。
示例 2：
输入：stones = [31,26,33,21,40]
输出：5
示例 3：
输入：stones = [1,2]
输出：1
 
提示：
1 <= stones.length <= 30
1 <= stones[i] <= 100

1. Clearfication:
 怎么分析这道题呢？
            一开始想了是不是可以使用堆，试了一下，不行
        背包容量是1
        怎么去计算这个转化的过程呢？
        怎么去分解这个问题？

2. 看题解：
感觉最难的是怎么将具体的问题转化为 动态规划去解决它的地方
对应这道题目中就是怎么将具体问题转化为背包问题，然后去找 sum /2 ,然后去标记它的状态信息这一块
func lastStoneWeightII(stones []int) int {
    sum := 0
    for _, v := range stones {
        sum += v
    }
    n, m := len(stones), sum/2
    dp := make([][]bool, n+1)
    for i := range dp {
        dp[i] = make([]bool, m+1)
    }
    dp[0][0] = true
    for i, weight := range stones {
        for j := 0; j <= m; j++ {
            if j < weight {
                dp[i+1][j] = dp[i][j]
            } else {
                dp[i+1][j] = dp[i][j] || dp[i][j-weight]
            }
        }
    }
    for j := m; ; j-- {
        if dp[n][j] {
            return sum - 2*j
        }
    }
}
看了题解里面节省空间的时候，正着遍历和倒着遍历还不一样。。。，有可能会覆盖状态，这个地方也是需要注意的，需要想清楚

3. 复杂度分析：
时间复杂度：O(n*n)
空间复杂度：O(n*n)

4. 总结：
4.1: 如何将具体的实际问题转化为可以解决的计算机理解的可计算的方案，感觉还是蛮难的

4.2: 感觉蛮像是数学问题的
