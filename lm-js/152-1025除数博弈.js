// 1025. 除数博弈
// 爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。

// 最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：

// 选出任一 x，满足 0 < x < N 且 N % x == 0 。
// 用 N - x 替换黑板上的数字 N 。
// 如果玩家无法执行这些操作，就会输掉游戏。

// 只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 False。假设两个玩家都以最佳状态参与游戏。

 

// 示例 1：

// 输入：2
// 输出：true
// 解释：爱丽丝选择 1，鲍勃无法进行操作。
// 示例 2：

// 输入：3
// 输出：false
// 解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
 

// 提示：

// 1 <= N <= 1000


/*
    思路：大胆揣摩，我写了几个数字，找规律，发现奇数返回false,偶数返回true。又随机多试了几个案例，提交。
         嘻嘻，博弈局有些时候确实要大胆一点。

        然后又看了看题解，我觉得官方题解上讲述的动态规划，不太像动态规划，更像暴力多一些。
        两层遍历模拟玩家操作，遍历[i,N]，遍历j[0,i),如果i%j==0，然后i-j替换i,因此当dp[i-j]存在为false的时候，dp[i]肯定可以为true，即爱丽丝可以取得胜利。

*/


var divisorGame = function(n) {
    return n%2==0
};

/*
    时间复杂度：O(1)
    空间复杂度：O(1)
*/

var divisorGame = function(n) {
    let dp=[]
    dp[1]=false,dp[2]=true
    for(let i=3;i<=n;i++){
        dp[i]=false
       for(let j=1;j<i;j++){
           //模拟玩家操作
           if(i%j==0&&!dp[i-j]){
               dp[i]=true
               break;
           }
       }
    }
    return dp[n]
}

/*
    时间复杂度：O(N^2)
    空间复杂度：O(N)
*/