/*
1217. 玩筹码
数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。

你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：

将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
最开始的时候，同一位置上也可能放着两个或者更多的筹码。

返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

 

示例 1：

输入：chips = [1,2,3]
输出：1
解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。
示例 2：

输入：chips = [2,2,2,3,3]
输出：2
解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。
 

提示：

1 <= chips.length <= 100
1 <= chips[i] <= 10^9
*/

/*
    思路：重点就是要get到移动两个单位的时候不消耗代价。
        那其实可以把所有的筹码两步两步移动到对应1或者2的位置上，也就是说奇数移动到1上，偶数移动到2上，这样过程都没付出代价。
        最后一步，当然就是看位置1上的数多还是位置2上的数多。再扩展开来，也就是奇数多则需要偶数移一步，偶数多则奇数移
        总结起来就是。偶数和奇数个数相比，返回小的那个。

*/

var minCostToMoveChips = function (position) {
    let odd = 0, even = 0
    for (let i = 0; i < position.length; i++) {
        if (position[i] % 2) {
            odd++
        }
        else {
            even++
        }
    }
    return odd <= even ? odd : even
};


/*
    时间复杂度：O(N)
    空间复杂度：O(1)
*/