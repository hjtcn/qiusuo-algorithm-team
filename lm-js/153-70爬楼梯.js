// 70. 爬楼梯
// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

// 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

// 注意：给定 n 是一个正整数。

// 示例 1：

// 输入： 2
// 输出： 2
// 解释： 有两种方法可以爬到楼顶。
// 1.  1 阶 + 1 阶
// 2.  2 阶
// 示例 2：

// 输入： 3
// 输出： 3
// 解释： 有三种方法可以爬到楼顶。
// 1.  1 阶 + 1 阶 + 1 阶
// 2.  1 阶 + 2 阶
// 3.  2 阶 + 1 阶

/*
    思路：第一时间想的就是dp[i]=dp[i-1]+dp[i-2]作为状态转移方程
        之前也做过，但两次的心态都截然不同了，专题训练可以滴。
*/
var climbStairs = function(n) {
    let dp=[]
    dp[1]=1,dp[2]=2
    for(let i=3;i<=n;i++){
        dp[i]=dp[i-1]+dp[i-2]
    }
    return dp[n]
};
/*
    时间复杂度：O(N)
    空间复杂度：O(N)
*/

//优化
var climbStairs = function(n) {
    if(n==1) return 1
    if(n==2) return 2
    //pre1前一位，pre2前两位
    let cur=0,pre1=2,pre2=1
    for(let i=3;i<=n;i++){
        cur=pre1+pre2
        pre2=pre1
        pre1=cur
    }
    return cur
}

/*
    时间复杂度：O(N)
    空间复杂度：O(1)
*/

/*
    思考：不同时候看到同一道题拥有的思路是不一样的。之前也做过爬楼梯，当时想的就是要递归，还要记录值，今天知道是在做动规，，就会直接想想状态转移方程是什么。
        但是很多时候不是很明显的算法题的时候，属于那个类别还真不太清楚。我们还是多想想，多见见世面。哈哈哈

*/