// 面试题 08.01. 三步问题
// 三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。

// 示例1:

//  输入：n = 3 
//  输出：4
//  说明: 有四种走法
// 示例2:

//  输入：n = 5
//  输出：13
// 提示:

// n范围在[1, 1000000]之间
/*
    思路：状态转移方程是很清晰的。
         dp[i] = dp[i-1] + dp[i-2] + dp[i-3]
         但问题就出在取余上。
         如果最后再取余，中间就会数据溢出。
         在过程中取余。是的，我不知道咋取，哈哈哈哈
         瞅瞅题解：dp[i] = (dp[i-1] + dp[i-2] + dp[i-3])%1000000007.
         陷入疑惑，dp[i-1]是已经取过余的，它们想加的和，还会等于目标值吗？
         一番讨论。(dp[i-1] + dp[i-2] + dp[i-3])%m=(dp[i-1]%m+dp[i-2]%m+dp[i-3]%)%m
         因此取过余的值也能遍历相加。。。。
*/
var waysToStep = function(n) {
    let dp = [0,1,2,4]
    for(let i = 4; i<n+1; i++){
        dp[i] = (dp[i-1] + dp[i-2] + dp[i-3])%1000000007
    }
    return dp[n]
};
/*
    时间复杂度：O(N)
    空间复杂度：O(N)
*/
var waysToStep = function(n) {
    if(n==1) return 1
    if(n==2) return 2
    if(n==3) return 4
    let a=1,b=2,c=4,cur=0
    for(let i = 4; i<n+1; i++){
        cur=(a+b+c)%1000000007
        a=b
        b=c
        c=cur
    }
    return cur
};

/*
    时间复杂度：O(N)
    空间复杂度：O(1)
*/

/*
    思考：动态规划就是胆大心细。
*/