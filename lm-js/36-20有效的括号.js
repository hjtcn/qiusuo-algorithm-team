// 20. 有效的括号
// 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

// 有效字符串需满足：

// 左括号必须用相同类型的右括号闭合。
// 左括号必须以正确的顺序闭合。
// 注意空字符串可被认为是有效字符串。

// 示例 1:

// 输入: "()"
// 输出: true
// 示例 2:

// 输入: "()[]{}"
// 输出: true
// 示例 3:

// 输入: "(]"
// 输出: false
// 示例 4:

// 输入: "([)]"
// 输出: false
// 示例 5:

// 输入: "{[]}"
// 输出: true

/**
 * @param {string} s
 * @return {boolean}
 */
var isValid = function (s) {
    //利用数组模拟栈的操作
    let arr = []
    //字符串遍历
    for (let i = 0; i < s.length; i++) {   //如果是左括号，则push进数组
        if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
            arr.push(s[i])
        }
        else {//反之是右括号
            let len = arr.length
            //这里是为了防止数组溢出。
            if (len == 0) {
                //如果arr数组为空数组，此时s[i]却为右括号，则左边肯定没有和其相匹配的，返回false
                return false
            }
            else if ((s[i] == ')' && arr[len - 1] == '(') || (s[i] == ']' && arr[len - 1] == '[') || (s[i] == '}' && arr[len - 1] == '{')) {
                //如果此时s[i]为右括号，而arr的数组最后一位恰好是能和其匹配的左括号，则arr.pop()。将左括号也移出栈
                arr.pop()
            }
            else { //这种就是当前括号不和数组的最后一位相匹配的情况
                return false
            }
        }

    }
    //如果栈为空，则返回true,反之则返回false
    return arr.length == 0
};

/** 题解
 利用数组模拟栈的操作。遍历字符串，若为左括号，push进入栈，若为右括号，且与栈顶元素相匹配，则弹出栈顶元素，否则直接返回false
 若栈为空，则返回true,反之则为false
复杂度分析：
  时间复杂度：O(N)
  遍历一遍字符串

  空间复杂度：O(n)
  变量声明数组，模拟栈的操作。
*/