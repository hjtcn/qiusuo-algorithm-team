/*
406. 根据身高重建队列
假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。

请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。

 

示例 1：

输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
示例 2：

输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
 

提示：

1 <= people.length <= 2000
0 <= hi <= 106
0 <= ki < people.length
*/


/*
    思路：先处理原数组，自己想的时候又试图找规律呢，但是没有试探成功。

    题解：先将这确认按身高从高到低进行排序，身高相同，k值从小到大排
 排序前：[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
 排序后：[[7,0],[7,1],[6,1],[5,0],[5,2]，[4,4],]
    然后根据k值，往目标数组里面插入
    [[7,0]]
    [[7,0],[7,1]]
    [[7,0],[6,1],[7,1]]
    [[5,0],[7,0],[6,1],[7,1]]
    [[5,0],[7,0],[5,2],[6,1],[7,1]]
    [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
    今天确实不在状态，刚开始一看，人家python用insert，用的可爽，js我忘了该用啥了。
    好吧。splice数组插入
    target.splice(people[i][1],0,people[i])

    为什么这样插入方式就能直接构造目标数组呢？
    后面剩的是比较矮的身高了，就算它往前插入也不会影响之前构建的目标数组

*/

var reconstructQueue = function(people) { 
    let len=people.length,target=[]
    people.sort((a,b)=>{
        if(a[0]==b[0]){
            return a[1]-b[1]
        }
        else{
         return b[0]-a[0]
        }
    })
    //身高从大到小排序，主要操作在于插入
    for(let i=0;i<len;i++){
        
         target.splice(people[i][1],0,people[i])
    }
    return target
 };

 /*
    时间复杂度：O(nlogn)
    空间复杂度：O(n)
 */

/*
    贪心需要灵感。
*/