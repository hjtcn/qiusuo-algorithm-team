// 150. 逆波兰表达式求值
// 根据 逆波兰表示法，求表达式的值。

// 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

 

// 说明：

// 整数除法只保留整数部分。
// 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
 

// 示例 1：

// 输入: ["2", "1", "+", "3", "*"]
// 输出: 9
// 解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
// 示例 2：

// 输入: ["4", "13", "5", "/", "+"]
// 输出: 6
// 解释: 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
// 示例 3：

// 输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
// 输出: 22
// 解释: 
// 该算式转化为常见的中缀算术表达式为：
//   ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
// = ((10 * (6 / (12 * -11))) + 17) + 5
// = ((10 * (6 / -132)) + 17) + 5
// = ((10 * 0) + 17) + 5
// = (0 + 17) + 5
// = 17 + 5
// = 22
 

// 逆波兰表达式：

// 逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。

// 平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
// 该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
// 逆波兰表达式主要有以下两个优点：

// 去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
// 适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。


/*
 * @lc app=leetcode.cn id=150 lang=javascript
 *
 * [150] 逆波兰表达式求值
 */

// @lc code=start
/**
 * @param {string[]} tokens
 * @return {number}
 */
var evalRPN = function (tokens) {
    let stack = []
    for (let i = 0; i < tokens.length; i++) {
        let a = null, b = null
        //遇见运算符，则直接执行处理左右值(将左右值出栈，将处理后结果入栈)，遇到值，则执行入栈
        switch (tokens[i]) {
            case '*':
                a = stack.pop()
                b = stack.pop()
                stack.push(a * b)
                break;
            case '+':
                a = stack.pop()-0
                b = stack.pop()-0
                stack.push(a + b)
                break;
            case '-':
                a = stack.pop()
                b = stack.pop()
                stack.push(b-a)
                break;
            case '/':
                a = stack.pop()
                b = stack.pop()
                stack.push(parseInt(b/a))
                break;

            default:
                stack.push(tokens[i])
                break;
        }
    }
    return stack[0]
};

/*
 利用栈的入栈出栈操作，遇到数值直接入栈，遇到运算符，先将左右的待操作数值出栈，然后执行运算符获得结果数值，再将结果值存入栈中。
 ps:一直想把代码量再缩缩，把遇到四种运算符的情况封装成doOpera函数，但考虑到要在doOpera函数中再次判断运算符种类，就觉得有点重复操作了。
复杂度分析：
  时间复杂度：O(N)
  一层for循环，执行入栈出栈操作
  空间复杂度：O(N)
  变量声明数组,存放数值或执行运算符后的结果
*/