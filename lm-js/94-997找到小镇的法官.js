// 997. 找到小镇的法官
// 在一个小镇里，按从 1 到 N 标记了 N 个人。传言称，这些人中有一个是小镇上的秘密法官。

// 如果小镇的法官真的存在，那么：

// 小镇的法官不相信任何人。
// 每个人（除了小镇法官外）都信任小镇的法官。
// 只有一个人同时满足属性 1 和属性 2 。
// 给定数组 trust，该数组由信任对 trust[i] = [a, b] 组成，表示标记为 a 的人信任标记为 b 的人。

// 如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的标记。否则，返回 -1。

 

// 示例 1：

// 输入：N = 2, trust = [[1,2]]
// 输出：2
// 示例 2：

// 输入：N = 3, trust = [[1,3],[2,3]]
// 输出：3
// 示例 3：

// 输入：N = 3, trust = [[1,3],[2,3],[3,1]]
// 输出：-1
// 示例 4：

// 输入：N = 3, trust = [[1,2],[2,3]]
// 输出：-1
// 示例 5：

// 输入：N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
// 输出：3
 

// 提示：

// 1 <= N <= 1000
// trust.length <= 10000
// trust[i] 是完全不同的
// trust[i][0] != trust[i][1]
// 1 <= trust[i][0], trust[i][1] <= N



var findJudge = function(N, trust) {
    if(N==1&&!trust.length){
        return N
    }
    let len=trust.length,trustMap=new Map(),kk=new Map()
    for(let i=0;i<len;i++){
        kk.set(trust[i][0],1);
    }
    for(let i=0;i<len;i++){
        let trustNum=(trustMap.get(trust[i][1])||0)+1 
        trustMap.set(trust[i][1],trustNum)
        if(trustNum==N-1&&!kk.get(trust[i][1])){
            return trust[i][1]
        }
    }
    return -1
};
/**
 这道题是自己AC的，后来又看看题解，基本答题思路都差不多：判断是否信任过别人且被信任过N-1次，即为法官
 但是可能思考结构是不一样的。
 依照是一个有向图的简单题来说，大多人考虑到了入度出度。而自己把这个概念忘记了，然后去了解了这些概念
  度：
   顶点的度就是该顶点的入度和出度之和
  入度：
   以该顶点为终点的有向边的数目。（其实就是被指向。——>自己）
  出度：
   以该顶点为起点的有向边的数目。（其实就是指出去 自己——>)

    时间复杂度：O(N)
    一层for循环
    空间复杂度：O(1)
    定义了两个map树，用来判断是否信任过别人，以及被信任了几次
 */