// 给定数组 A，我们可以对其进行煎饼翻转：我们选择一些正整数 k <= A.length，然后反转 A 的前 k 个元素的顺序。我们要执行零次或多次煎饼翻转（按顺序一次接一次地进行）以完成对数组 A 的排序。

// 返回能使 A 排序的煎饼翻转操作所对应的 k 值序列。任何将数组排序且翻转次数在 10 * A.length 范围内的有效答案都将被判断为正确。

//  

// 示例 1：

// 输入：[3,2,4,1]
// 输出：[4,2,4,3]
// 解释：
// 我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
// 初始状态 A = [3, 2, 4, 1]
// 第一次翻转后 (k=4): A = [1, 4, 2, 3]
// 第二次翻转后 (k=2): A = [4, 1, 2, 3]
// 第三次翻转后 (k=4): A = [3, 2, 1, 4]
// 第四次翻转后 (k=3): A = [1, 2, 3, 4]，此时已完成排序。 
// 示例 2：

// 输入：[1,2,3]
// 输出：[]
// 解释：
// 输入已经排序，因此不需要翻转任何内容。
// 请注意，其他可能的答案，如[3，3]，也将被接受。
//  

// 提示：

// 1 <= A.length <= 100
// A[i] 是 [1, 2, ..., A.length] 的排列

/**
 * @param {number[]} arr
 * @return {number[]}
 */
var pancakeSort = function (arr) {
    let res = []
    let len = arr.length;
    while (len > 1) {
        //如果当前最大元素的位置就是需排序的数组长度减一，就len减一，继续循环
        if (arr.indexOf(len) == len - 1) {
            len--;
            continue;
        }
        else {//反之，则可以获取到当前最大元素的索引，且该索引大于1，则push到res数组中.
            let place = arr.indexOf(len) + 1
            if (place > 1) {
                res.push(place)
                arr = sortDetail(place, arr)//从上面一步可以看出，从(0,最大元素的索引)进行煎饼排序，改变arr数组
            }

            res.push(len)//将剩余需排序的数组长度len放入res数组
            arr = sortDetail(len, arr)//将(0,剩余需排序数组的长度)进行煎饼排序，改变arr数组。
            len--;//len减一，需排序的数组又少了一个元素哦
        }
    }
    return res
};
//模拟煎饼排序的过程，根据索引和js的reverse函数，进行前几个元素的排序
function sortDetail(place, arr) {
    let leftArr = arr.slice(0, place).reverse(), rightArr = arr.slice(place)
    return leftArr.concat(rightArr)
}
/**题解
 暴力解决。该题的重点在于提示:A[i] 是 [1, 2, ..., A.length] 的排列.
 这样你就知道最大值就是A.length，比如第一次拿最大值所在的位置进行煎饼排序，让它位于第一，那么下一次排序让它放到最后就可以了。
 经过这两次排序，最大的值就放到最后了，可以不在动这个值了，此时res数组中应该存在[一开始最大值的索引+1，数组总长度]两个元素。
 而不难想到，把最大值排好序，找第二大的数，同上进行操作，将res数组再次push([第二大的数的索引+1,待排序数组长度])这两个元素了，以此类推。。。。
 需要注意三个点:(1)当前待排序较大值的索引，如果就在你想放置的位置，就可以不必排序了，continue;
              (2)res数组push新元素时，模拟煎饼排序，实时修改原数组。
              (3)如果当前待排序较大值的索引已经为0了，就不能再加一放入res数组了，因为煎饼排序排一个数没有意义。
  复杂度分析：
    时间复杂度是:O(N^2)
    这个地方并不确定，因为在while循环的基础上使用js的一些api，像indexOf的最大时间复杂度就为O(N),因此猜测时间复杂度为O(N^2)
    空间复杂度：O(N）
    煎饼排序的leftArr,rightArr和返回res数组都借用了数组空间
 */